#!/bin/bash
# Copyright (C) 2011 peak@princeton.edu
# License: Creative Commons Attribution-NonCommerical-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)
# See http://creativecommons.org/licenses/by-nc/3.0/
# Attribution shall include the copyright notice above.

# peak@princeton.edu 2011
# For help: $0 --help

# Compare: split-gse-by-platform

args=("$@")

VERSION=0.0.9

# History:
# 0.0.3: --file FILE
# 0.0.4: --excisions EXCISIONS
# 0.0.5: debugged
# 0.0.6: generated name includes {TAG}{N}
# 0.0.7: reconstruct filename from nnn.mmm format
# 0.0.8: bug fixes re: reconstruct
# 0.0.9: myCopy (avoid failure of ln)

# Requires:
#   fgrep -x

BN=`basename $0`
DN=`dirname $0`

VERBOSITY=0
prefix=xx
FOUR=4
TAG=s
COPY="/bin/cp -p"
# Portability stuff:
case `uname` in
  Darwin ) STATOPT=-f       ;;
  *      ) STATOPT=--format ;;
esac

function help {
cat <<EOF
Syntax: $BN [OPTIONS] --out OUT [PATHNAME [SAMPLE ....]]

This script excises the specified samples from the single-platform
family.soft file specified by PATHNAME, and writes the output to a
file determined as follows:

 . if OUT is a directory, the output is written to OUT/{FILENAME}_{TAG}{N}_family.soft
   where:
      {FILENAME} is the basename of PATHNAME apart from the _family.soft suffix,
      {TAG} is "s" unless otherwise specified by the --tag TAG option, and
      {N} is the total number of samples included in the output;
 . otherwise, the output is written to OUT.

Each SAMPLE should be either a GEO sample identifier (e.g. GSM123) or
accession number (e.g. 123).

A set of PATHNAME and corresponding SAMPLE values may also be specified in an
excisions file as specified using the --excisions option.  In this case,
OUT must be a directory.

WARNING: Currently the ^SERIES section of each output file is just a
         copy of the ^SERIES section of the input.

WARNING: It is an error to specify an output file that has the same
         inode as the input file.

Options:
  --out OUT      :: directory or filename for output (required - see above)
  --file FILE    :: read the list of SAMPLE ids from FILE instead of from the command line
  -f FILE        :: same as --file FILE
  --excisions EXCISIONS :: process the directives in the file named EXCISIONS,
                    where each directive has one of these forms:
                    PATHNAME ALL        # ignore this file
                    PATHNAME            # copy the file
                    PATHNAME SAMPLE ... # excise the specified gsm ids
  --tag TAG      :: the string to be inserted before the sample count when generating
                    the name of the output file (default: s)
  --link         :: use ln instead of cp when no alteration is required
  -v | --verbose :: verbose
  -V | --version :: print version

Assumptions:

The input file should have exactly one PLATFORM section; otherwise,
the script emits an error message and terminates.

It is assumed that the input GSE file is organized into sections as follows:

^DATABASE
^SERIES
^PLATFORM
...
^SAMPLE
...

(This assumption has been verified for a very large collection of GSE files in existence as of June 2011.)


Examples:

$ mkdir sce
$ $BN --out sce GSE10079_family.soft GSM333142 GSM333143 GSM333144

In this case, since sce is a directory, if 52 samples remain, the
output would be placed in the file sce/GSE10079_s52_family.soft

$ $BN --out sce/GSE10079x_family.soft GSE10079_family.soft 333142 333143 333144

Notes:

 * If PATHNAME has the .gz suffix, then:
    - if the unzipped file also exists in the same directory, then it
      will be used;
    - otherwise, PATHNAME will be unzipped in the same directory
      (leaving the original file in place)
 * The date and a copy of the command line is appended to the file .$BN.log in the
   same directory as the output file.

Version: $BN $VERSION

See source for copyright and licensing details.
EOF
}

function die {
    echo "$BN: $@" >&2
    exit 1
}

while [ "$1" ]
do case "$1" in
      -h | --help ) help
           exit
           ;;
      -v | --verbose ) VERBOSE=1
	   VERBOSITY=1
           shift
           ;;
      -f | --file ) FILE="$2"
	   if [ ! -r "$FILE" ] ; then die "unable to read $FILE" ; fi
           shift 2
           ;;
      --out ) DIR="$2"
           shift 2
           ;;
      --link ) COPY=ln
	   shift
           ;;
      --tag ) TAG="$2"
	   shift 2
	   ;;
      --excisions ) EXCISIONS="$2"
           shift 2
           ;;
      --verbosity ) VERBOSITY="$2"
	   if [ "$VERBOSITY" -gt 0 ] ; then VERBOSE=1 ; fi
           shift 2
           ;;
      -V | --version ) echo $BN version $VERSION
           exit
           ;;
      -* ) echo "$BN: unknown option $1"
           exit 1
           ;;
      *  ) break
           ;;
  esac
done


function verbose {
  if [ "$VERBOSE" ] ; then
    echo "$@"
  fi
}

# Syntax: vverbose LEVEL text ...
# Global: VERBOSITY
function vverbose {
  local vv="$1"
  shift
  if [ "$VERBOSITY" -ge "$vv"  ] ; then
    echo "$@"
  fi
}

# FOUR
function pad {
 case ${#1} in
        1 ) echo "000$1" ;;
        2 ) echo "00$1" ;;
        3 ) echo "0$1" ;;
        4 ) echo "$1" ;;
 esac
}

# Global NPLATFORMS NSAMPLES
function splitup {
  # --quiet and {*} are not supported on Mac OSX
  # idiosyncracy of csplit requires decrementing by 1:
  local i=$(( NPLATFORMS - 1 ))
  local j=$(( NSAMPLES - 1 ))
  csplit -s -n $FOUR "$1" "/^^SERIES/" "/^^PLATFORM/" "{${i}}" "/^^SAMPLE/" "{${j}}"
}

# Usage: if omitp sample ; then ...
# Global: OMIT
function omitp {
  fgrep -q -x -m 1 "${1}" $OMIT
}

# Syntax: prepare_file file
# Global: OUT
function prepare_file {
  vverbose 2  preparing "$OUT"
  cat ${prefix}0000 > "$OUT"
  cat ${prefix}0001 >> "$OUT"
  cat ${prefix}0002 >> "$OUT"
}


# Copy the admissible samples starting with xx0003
# xx0000 header
# xx0001 series
# xx0002 platform
# Global: NSAMPLES SSAMPLES OUT
function winnow {
  local i j xx this
  for ((i=0; i < NSAMPLES ; i++)) ; do
    j=$(pad $(( i + 3 )) )
    xx=${prefix}$j
    this=$(grep '^^SAMPLE' $xx | sed 's/[^=]* *= *//')
    if ! omitp "$this" ; then
       verbose adding $this
       cat $xx >> "$OUT"
       SSAMPLES=$((SSAMPLES + 1))
    fi
  done
}

# Compare SSAMPLES, SELECTED_SAMPLES and ((NSAMPLES - XSAMPLES_))
# Global BN NSAMPLES SSAMPLES XSAMPLES SELECTED_SAMPLES OUT
function check-sample-count {
  local diff=$((NSAMPLES - XSAMPLES))
  local error n
  if [ $diff != SELECTED_SAMPLES ] ; then
     error="$BN: INTERNAL ERROR: "
  fi
  n=$( (echo $SSAMPLES ; echo $SELECTED_SAMPLES ; echo $diff) | wc -l)
  if [ $n != 1 ] ; then
    error="$BN: warning: there is a discrepancy in the sample counts:"
  fi
  if [ -z "$error" ] ; then
    echo "$error"
    echo NSAMPLES=$NSAMPLES = actual number of samples in the input file
    echo XSAMPLES=$XSAMPLES = number of samples that were to be excluded
    echo SSAMPLES=$SSAMPLES = actual number of samples in the output file
    echo SELECTED_SAMPLES = $SELECTED_SAMPLES = "| set of input samples - set of excluded samples|"
  fi
}

# Reconstruct basename from nnn or nnn.mmm
# i.e. return GSEnnn or GSEnnnGPLmmm
# Example: f=$(reconstruct 123.456)
function reconstruct {
  local file f1 f2
  file="$1"
  if [[ $file =~ ^[0-9][0-9]*$ ]] ; then
     echo GSE${file}
  elif [[ "$file" =~ ^[0-9][0-9]*\.[0-9][0-9]*$ ]] ; then
     f1=${file/.*/}
     f2=${file/[^.]*./}
     echo GSE${f1}GPL${f2}
  else
     echo "$file"
  fi
}

# If DIR/FILE is a link or if we are trying to replace it with a hardlink, then rm it
# Syntax: myCopy FILE DIR
# Global: COPY
function mycopy {
  local FILE="$1"
  local DIR="$2"
  if [[ -h "$DIR/$FILE" || ( "$COPY" = ln && -r "$DIR/$FILE" ) ]] ; then
    verbose "replacing $DIR/$FILE ..."
    /bin/rm "$DIR/$FILE"
  fi
  $COPY "$FILE" "$DIR"
}

# Syntax: excisions FILE
# Global: DIR (a directory)
function excisions {
    local file="$1"
    local outfile gse gsms gsm g1 g2
    cat "$file" | while read gse gsms
    do
      if [ "$gsms" = "ALL" ]; then
         verbose skipping $gse
         continue
      fi
      # Infer the actual filename:
      gse=$(reconstruct "$gse")
      vverbose 2 "$BN: reconstruct yielded gse=$gse"
      if [ -r "${gse}_family.soft" ] ; then gse="${gse}_family.soft" ; fi
      if [ "$gsms" = "" ]; then
         mycopy "${gse}" "$DIR" || echo "$BN: failure: $COPY ${gse} $DIR"
         continue
      fi
      verbose "$BN: recursive call: excise-gse-by-sample --out $DIR $gse $gsms"
      $DN/excise-gse-by-sample --out "$DIR" "$gse" $gsms
    done
}

### PROCEED

  if [ -z "$DIR" ] ; then die "No output file or directory was specified." ; fi


### EXCISIONS
if [ -n "$EXCISIONS" ] ; then
  # echo "args=${args[@]}"
  if [ -d "$DIR" ] ; then
    verbose $BN: output files will be written in $DIR
  elif [ -r "$DIR" ] ; then
    die "ERROR: the parameter specified with the --out parameter, $DIR, is a file."
  else
    mkdir -p "$DIR" || die "unable to mkdir $DIR"
  fi
  excisions "$EXCISIONS"
  exit $?
fi


### Regular input
  if [ $# = 0 ]  ; then verbose $BN: No input file specified ; exit ; fi

  file="$1"
  shift

  # Samples to omit:

  if [ $# = 0 -a -z "$FILE" ] ; then die "No samples to excise have been specified" ; fi

  OMIT=$(mktemp /tmp/excise-gse-by-sample.XXXXXXXXXX) || die "Unable to create a temporary file for samples"

  if [ $# -gt 0 ] ; then
    if [ -n "$FILE" ] ; then die "Samples to excise cannot be specified by file and on the command line" ; fi
    for omit
    do
      echo "$omit" >> $OMIT
    done
  else
    cat "$FILE" > $OMIT
  fi
  /bin/mv $OMIT $OMIT.bak
  # Use 'sort -u' in the hope that ((NSAMPLES - XSAMPLES)) will be the correct count:
  sed -e 's/^  *//' -e 's/  *$//' -e 's/^\([0-9]\)/GSM\1/' $OMIT.bak | sort -u > $OMIT

  f=$(reconstruct "$file")
  vverbose 2 "$BN: reconstruct $file yielded $f"

  g=${f/.gz/}
  if [ "$f" = "$g" ]; then
    if [ ! -r "$f" ] ; then
      echo "$BN: $file not found"
      exit 1
    fi
  elif [ -r "$f" ] ; then
    if [ -r "$g" ] ; then
      verbose reading $g as it already exists
    else
      gunzip -c "$f" > "$g"
    fi
    f="$g"
  elif [ ! -r "$g" ] ; then
    die "neither $f nor $g found"
  fi

  verbose "$BN: $f"

  NPLATFORMS=$(grep '^^PLATFORM' "$f" | wc -l)
  # Warning: NPLATFORMS may have extraneous blanks
  if [ $NPLATFORMS != 1 ] ; then die "Skipping the input file $file as it has $NPLATFORMS platforms" ; fi

  # Get an accurate count of the projected count of remaining samples:
  grep '^^SAMPLE' "$f" | sed -e 's/[^=]*=//' -e 's/ //g' | sort -u > $OMIT.bak

  # use echo to remove any blanks
  NSAMPLES=$(echo $(cat $OMIT.bak | wc -l))
  XSAMPLES=$(echo $(cat $OMIT | wc -l))
  SELECTED_SAMPLES=$(echo $(comm -23 $OMIT.bak $OMIT | wc -l))

  verbose NPLATFORMS=$NPLATFORMS
  verbose NSAMPLES=$NSAMPLES

  if [ -d "$DIR" ] ; then
    OUT=$(basename "$f")
    OUT=${OUT/_family.soft}
    OUT="$DIR"/${OUT}_${TAG}${SELECTED_SAMPLES}_family.soft # see check-sample-count
  else
    OUT="$DIR"
  fi

  verbose OUT=$OUT

  if [ -r "$OUT" ] ; then
    x=$(stat $STATOPT "%i" "$f" "$OUT" | uniq | wc -l)
    # Warning: $x may contain extraneous blanks
    if [ $x -ne 2 ] ; then die "ERROR: input ($f) and output ($OUT) files are identical" ; fi
  fi


  splitup "$f" || die "ERROR: csplit $file failed"

  prepare_file "$f"  # in particular, set $OUT

  (date ; echo "# cd $(pwd)"; echo "$0 ${args[@]}" ; echo "") >> $(dirname "$OUT")/.$BN.log

  # SSAMPLES keeps tabs on the actual number of SAMPLES written to $OUT
  SSAMPLES=0
  winnow
 
  check-sample-count

# FOUR
if [ -r ${prefix}0000 ] ; then
  /bin/rm ${prefix}[0-9][0-9][0-9][0-9]
fi

for f in $OMIT $OMIT.bak ; do if [ -w $f ] ; then /bin/rm "$f" ; fi ; done
