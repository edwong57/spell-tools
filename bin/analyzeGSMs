#!/bin/bash

# Copyright (C) 2011 peak@princeton.edu
# License: Creative Commons Attribution-NonCommerical-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)
# See http://creativecommons.org/licenses/by-nc/3.0/
# Attribution shall include the copyright notice above.

# peak@princeton.edu 2011
# For help: $0 --help

VERSION=0.1.3

# Updates:
# 0.1.2: ${SEEN[]}
# 0.1.3: Use ^SAMPLE instead of !Series_sample_id in case GSE file has been split

# Requires: zgrep that works with .gz files

BN=$(basename "$0")
DN=$(cd $(dirname "$0"); pwd)

function help {
cat <<EOF
Syntax: $BN [OPTIONS] [FILE ...]

Given a set of GSE files (some or all of which may be compressed),
produce the mapping of GSE to GSM identifiers, and analyze it.

Some or all of the files may be compressed (.gz); if both a compressed
and uncompressed version are specified, only the uncompressed version
will be used.

The set of GSE files may be specified explicitly by listing them on
the command line, or implicitly by specifying a directory (see below).

Unless otherwise specified, output is written to DN/../data/sce/gse_gsm.txt
where DN is the directory in which this script resides.

If the output file already exists, then an error will be raised unless
the --append or --skip option is specified.

Options:
  --dir DIR     :: the directory of GSE files to be analyzed
  --out OUT     :: the pathname of the file into which the gse-gsm
                   records are to be written.
  --append      :: append to OUT
  --skip        :: skip generation of OUT if it already exists

Example:
  $BN --dir .

Version: $BN $VERSION

See source for copyright and licensing details.
EOF
}

while [ "$1" ]
do case "$1" in
      -h | --help ) help
           exit
           ;;
      -v | --verbose ) VERBOSE=1
           shift
           ;;
      -V | --version ) echo $BN version $VERSION
           exit
           ;;
      --append ) APPEND=1
           shift
           ;;
      --skip ) SKIP=1
           shift
           ;;
      --dir ) DIR="$2"
           shift 2
           ;;
      --out ) OUT="$2"
           shift 2
           ;;
      -* ) echo "$BN: unknown option $1"
           exit 1
           ;;
      *  ) break
           ;;
  esac
done

function die {
    echo "$BN: $@" >&2
    exit 1
}

function verbose {
  if [ "$VERBOSE" ] ; then
    echo "$@"
  fi
}

if [ -z "$OUT" ] ; then
  mkdir -p "$DN/../data/sce" || die "unable to mkdir $DN/../data/sce"
  OUT=$(cd $DN/../data/sce; pwd)
  OUT=$OUT/gse_gsm.txt
fi

# Global: SEEN
# Note: This is fast and takes constant time, whereas using += is slow
# and takes more time as the array size grows:
function see {
  SEEN[${#SEEN[@]}]="$1"
}

# Usage: if seen "$value" ; then ....
# Global: SEEN
# This is horribly inefficient for the sake of portability
function seen {
  local i
  for i in "${SEEN[@]}"
  do
    if [ "$i" = "$1" ] ; then true ; return ; fi
  done
  false
}

# Usage: append PATHNAME
# Global: VERBOSE OUT SEEN
# SEEN[] is used to avoid processing the same file twice.
function append {
    local f="$1"
    local gse=$(basename "$f")
    gse=${gse/_*/}
    local gseid=${gse/GSE/}
    local gseid=${gseid/GPL/.}  # GPL
    local g=${f%.gz}
    local grep
    if seen "$g" ; then
	verbose "SEEN $g so returning"
	return
    fi
    if [ "$f" = "$g" ] ; then
      grep=grep
    else
      grep=zgrep
    fi
    verbose append: gseid=$gseid
    $grep '^^SAMPLE' "$f" | sed 's/^[^=]*= *GSM/'"$gseid "'/' >> $OUT
    see "$g"
}


if [ -r "$OUT" ] ; then
  if [ -z "$SKIP" -a -z "$APPEND" ] ; then
      die "the output file $OUT already exists"
  fi
else
  SKIP=  
fi

if [ -z "$SKIP" ] ; then
  if [ -n "$DIR" ] ; then
    (cd "$DIR"
     for f in GSE*.soft*
     do
       append "$f"
     done
    )
  elif [ $# = 0 ] ; then
    die no GSE files have been specified
  else
    for f
    do
      append "$f"
    done
  fi
else
  verbose "Skipping generation of $OUT"
fi


if [ -r "$OUT" ] ; then
  sort -u -o "$OUT" "$OUT"
  verbose "$BN: analyzing $OUT ..."
  "$DN/analyzeGSMs.rb" "$OUT" 
else
  echo "$BN: $OUT not found"
fi
