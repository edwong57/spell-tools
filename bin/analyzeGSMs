#!/bin/bash
# Copyright (C) 2011 peak@princeton.edu
# License: Creative Commons Attribution-NonCommerical-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)
# See http://creativecommons.org/licenses/by-nc/3.0/
# Attribution shall include the copyright notice above.

# peak@princeton.edu 2011
# For help: $0 --help

VERSION=0.1.8

# Updates:
# 0.1.2: SEEN
# 0.1.3: Use ^SAMPLE instead of !Series_sample_id in case GSE file has been split
# 0.1.4: --dict option to generate and use a GSM dictionary
# 0.1.5: SEEN with fgrep
# 0.1.6: add missing quote
# 0.1.7: --overwrite
# 0.1.8: --proceed
# 0.1.9: --link

ECHO=
EXCISIONS=excisions.txt

# Requires:
#   zgrep that works with .gz files
#   fgrep -x
#   $DN/analyzeGSMs.rb
#   $DN/generate_GSM_dictionary if --dict option is specified
#   $DN/excise-gse-by-sample if --proceed option is specified

BN=$(basename "$0")
DN=$(cd $(dirname "$0"); pwd)

DEFAULT_OUT_DIR="$DN/../data/sce"

function help {
cat <<EOF
Syntax: $BN [OPTIONS] [FILE ...]

Given a set of GEO series files (normally with names of the form
GSE*_family.soft), this script produces the mapping of GSE to GSM
identifiers, and analyzes it with a view to eliminating non-trivial
overlaps.  An overlap is regarded as trivial if it contains just one
GSM.

Some or all of the input files may be compressed (.gz); if both a compressed
and uncompressed version are specified, only the first file that is specified
will be used.

The set of GSE files may be specified explicitly by listing them on
the command line, or implicitly by specifying a directory (see below).

Unless otherwise specified, the mapping of GSE to GSM identifiers is
written to DN/../data/sce/gse_gsm.txt where DN is the directory in
which this script resides.  The "GSE" and "GSM" prefixes are omitted
from the mapping file.

If the output file already exists, then an error will be raised unless
one of the following options is specified: "--overwrite", "--append",
or "--skip"

If the --proceed option is specified, then the directory specified by
OUT will be populated with a set of family.soft files that resolves
the non-trivial overlaps. Specifically:
  * if an input GEO series file has been identified as redundant,
    it will not be copied;
  * all the other input GEO series files are copied to OUT and then
    certain excision operations are applied to minimize overlaps

For further details about the resolution process, see the documentation for
analyzeGSMs.rb (e.g. run "analyzeGSMs.rb --help").

Options:
  --append      :: append to OUT as specified by the --out option.
  --link        :: use ln instead of cp when no alteration is required.
  --overwrite   :: overwrite OUT if it already exists.
  --skip        :: skip generation of OUT if it already exists.
  --proceed     :: proceed with the resolution steps as described above;
                   an excisions file named $EXCISIONS will be created.
  --dir DIR     :: the directory of GSE files to be analyzed.
  --out OUT     :: the pathname of the file into which the gse-gsm
                   records are to be written (default: as described above).
  --dict FILE   :: generate and use a GSM dictionary of sample titles.

Examples:
  $BN --dir .

  $BN --dir . --dict gsm.dict

  $BN --dir . --out resolved/gse-gsm.txt --proceed

Version: $BN $VERSION

See source for copyright and licensing details.
EOF
}

while [ "$1" ]
do case "$1" in
      -h | --help ) help
           exit
           ;;
      -v | --verbose ) VERBOSE=-v
           shift
           ;;
      -V | --version ) echo $BN version $VERSION
           exit
           ;;
      --append ) APPEND=1
           shift
           ;;
      --skip ) SKIP=1
           shift
           ;;
      --link ) LINK=--link
	   shift
           ;;
      --overwrite ) OVERWRITE=1
           shift
           ;;
      --proceed ) PROCEED="--excisions $EXCISIONS"
           shift
           ;;
      --dir ) DIR="$2"
           shift 2
           ;;
      --dict ) DICT="$2"
           shift 2
           ;;
      --out ) OUT="$2"
           shift 2
           ;;
      -* ) echo "$BN: unknown option $1"
           exit 1
           ;;
      *  ) break
           ;;
  esac
done

function die {
    echo "$BN: $@" >&2
    exit 1
}

function verbose {
  if [ -n "$VERBOSE" ] ; then
    echo ${BN}: "$@"
  fi
}

if [ -z "$OUT" ] ; then
  mkdir -p "$DEFAULT_OUT_DIR" || die "unable to mkdir $DEFAULT_OUT_DIR"
  OUT=$(cd "$DEFAULT_OUT_DIR"; pwd)
  OUT="$OUT/gse_gsm.txt"
  verbose OUT=$OUT
elif [ -d "$OUT" ] ; then
  OUT="$OUT/gse_gsm.txt"
  verbose OUT=$OUT
else
  OUT_DIR=$(dirname "$OUT")
  if [ ! -d "$OUT_DIR" ] ; then
      mkdir -p "$OUT_DIR" || die unable to mkdir $OUT_DIR
  fi
fi

# Usage: if seen "$value" ; then ....
# Global: SEEN
function seen {
  fgrep -q -x -m 1 "${1}" $SEEN
}

# Global: SEEN
function see {
  if seen "$1" ; then return; fi
  echo "$1" >> $SEEN
}

function finish {
  if [ -r "$SEEN" ] ; then
    /bin/rm "$SEEN"
  fi
  exit
}

# Usage: append PATHNAME
# Global: VERBOSE OUT SEEN DICT DN
# SEEN is used to avoid processing the same file twice.
function append {
    local f="$1"
    local gse=$(basename "$f")
    gse=${gse/_*/}
    local gseid=${gse/GSE/}
    local gseid=${gseid/GPL/.}  # GPL
    local g=${f%.gz}
    local grep
    if seen "$g" ; then
	verbose "SEEN $g so returning"
	return
    fi
    if [ "$f" = "$g" ] ; then
      grep=grep
    else
      grep=zgrep
    fi
    verbose append: gseid=$gseid
    $grep '^^SAMPLE' "$f" | sed 's/^[^=]*= *GSM/'"$gseid "'/' >> $OUT
    if [ -n "$DICT" ] ; then
      $DN/generate_GSM_dictionary "$f" >> "$DICT" 
    fi
    see "$g"
}

if [ -r "$OUT" ] ; then

  # check consistency of specified options:
  if [ -n "$OVERWRITE" -a -n "$SKIP" ] ; then die "Please specify either --overwrite or --skip but not both" ; fi

  if [ -n "$OVERWRITE" ] ; then 
    /bin/rm "$OUT" || die "unable to rm $OUT"
  elif [ -z "$SKIP" -a -z "$APPEND" ] ; then
    die "the output file $OUT already exists"
  fi
else
  SKIP=
fi

SEEN=$(mktemp /tmp/seen.XXXXXXXXXX) || die Unable to create a temporary file for SEEN

if [ -z "$SKIP" ] ; then
  if [ -n "$DIR" ] ; then
    (cd "$DIR"
     for f in GSE*.soft*
     do
       append "$f"
     done
    )
  elif [ $# = 0 ] ; then
    verbose "no GSE files have been specified"
    finish
  else
    for f
    do
      append "$f"
    done
  fi
else
  verbose "Skipping generation of $OUT"
fi

if [ -r "$OUT" ] ; then
  sort -u -o "$OUT" "$OUT"
  verbose "analyzing $OUT ..."
  if [ -n "$DICT" ] ; then
    sort -u -o "$DICT" "$DICT"
    "$DN/analyzeGSMs.rb" $VERBOSE --sample-title "$DICT" $PROCEED "$OUT" 
  else
    "$DN/analyzeGSMs.rb" $VERBOSE $PROCEED "$OUT" 
  fi
else
  echo "$BN: $OUT not found"
fi

if [ -n "$PROCEED" ] ; then
  verbose DN/excise-gse-by-sample $VERBOSE --out "$(dirname "$OUT")" $PROCEED $LINK
  $DN/excise-gse-by-sample $VERBOSE --out "$(dirname "$OUT")" $PROCEED $LINK
fi

finish
