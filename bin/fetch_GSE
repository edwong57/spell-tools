#!/bin/bash
# Copyright (C) 2011 peak@princeton.edu
# License: Creative Commons Attribution-NonCommerical-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)
# See http://creativecommons.org/licenses/by-nc/3.0/
# Attribution shall include the copyright notice above.

# For help: $0 --help

VERSION=0.2.4
# New in 0.2: --series-type, --series-types, --by-array
# New in 0.2.1: default ORGANISM changed
# New in 0.2.2: --since YYYY/MM ; --minimum N
# New in 0.2.4: compatibility with MacOSX

# Default organism:
ORGANISM=Saccharomyces+cerevisiae

# WARNING: we may run "/bin/rm -r $TMP"
# TMP=/tmp/$USER
TMP=/tmp/$USER.$$

# Requires: eutils website (esearch and efetch)

BN=`basename $0`
DN=$(cd $(dirname $0); pwd)

function help {
cat <<EOF
Syntax: $BN [OPTIONS]

This script can be used:
  1) to obtain a list of GSE record identifiers for a specific organism;
  2) to download a set of GSE record files for a specific organism.

Here a "GSE record identifier" is a string (such as GSE18) of the form
GSEn where n is a GSE accession number, and a "GSE record file" is a
file with filename of the form GSEn_family.soft.gz

To download GSE record files, the destination directory must be specified 
using the "--download" option.

If the -o option is not specified, GSE record identifiers are written
to stdout.

Options:
  -h  | --help         :: this help
  -k  | --keep         :: keep temporary files
  -q  | --quiet        :: passed to wget
  -nv | --no-verbose   :: passed to wget
  -v  | --verbose      :: verbose mode
  -o    FILE           :: file into which the selected GSE record identifiers are to be written
  --include FILE       :: file of GSE record ids to include, one per line (lines beginning with # are ignored)
  --exclude FILE       :: file of GSE record ids to exclude, one per line
  --download DIRECTORY :: the directory into which GSE record files are to be downloaded

Criteria:
  --by-array           :: equivalent to: --series-type "Expression profiling by array"
  --organism ORGANISM  :: taxonomic term (see below); default is $ORGANISM
  --since ID           :: if ID is an integer, then ignore GSE records with GSE accession  
                          numbers less than or equal to ID; similarly if ID is a GSE record
                          identifier (see example below)
  --since YEAR/ | YEAR/MO :: ignore GSE records with a publication date earlier than the specified
                          year (or year and month); YEAR should be a four-digit year,
                          and MO should be a two-digit month (see example below).
  --series-type TYPE   :: retain only those GSE records of the specified series type (see below)
  --series-types FILE  :: retain only those GSE records with a series type equal to one of the
                          types in the file FILE (one TYPE per line)
  --minimum N          :: minimum number of samples (Series_sample_ids)


Notes:
  * ORGANISM may in principle be any NCBI taxonomic term
    (http://www.ncbi.nlm.nih.gov/Taxonomy) but not all such terms have
    associated GSE data; if ORGANISM is specified with a leading or
    trailing "*" it will be interpreted as a wildcard character.
  * Only one of --include and --exclude may be specified.
  * If "--include FILE" is specified then "--download DIRECTORY" should also be specified.
  * "--since GSEn" will be interpreted as "--since n"
  * "--since 2005/01" includes January 2005.
  * wget is run with the -N option to avoid unnecessary downloads.

Specifying a series type is equivalent to the GEO query term "TYPE"[Dataset Type].
Illustrative valid values of TYPE are:
 * Expression profiling by array
 * Genome variation profiling by genome tiling array
 * Expression profiling by genome tiling array
 * Genome variation profiling by array

Examples:

* To download all GSE files for the default organism provided that the
  GSE ids are greater than 1986 and that there are at least 6 samples:

  $BN --download . --since GSE1986 --minimum 6

* The following are equivalent methods for fetching GSE ids published
  since the beginning of 2009:

  $BN --since 2009/01
  $BN --since 2009/


References:
  * http://www.ncbi.nlm.nih.gov/geo/info/qqtutorial.html (Querying GEO Datasets)
  * http://www.ncbi.nlm.nih.gov/Taxonomy (Taxonomic terms admissible as ORGANISM)

Version: $BN $VERSION

See source for copyright and licensing details.
EOF
}

function check_exists {
  if [ -z "$1" -o ! -r "$1" ] ; then
    echo "$BN: $1 cannot be read"
    exit 1
  fi
}

while [ "$1" ]
do case "$1" in
      -h | --help ) help
           exit
           ;;
      -o ) OUTFILE="$2"
           shift 2
           ;;
      --minimum ) MINIMUM="$2"
           shift 2
           ;;
      --include ) INCLUDE="$2"
	   check_exists "$2"
           shift 2
           ;;
      --exclude ) EXCLUDE="$2"
	   check_exists "$2"
           shift 2
           ;;
      --download ) DOWNLOAD="$2"
           shift 2
           ;;
      --since )
           if [[ "$2" =~ "/" ]] ; then
	       if [[ $2 =~ ^[0-9]+/[0-9][0-9]$ ]] ; then
	         SINCEDATE="$2"
               elif  [[ $2 =~ ^[0-9]+/$ ]] ; then
	         SINCEDATE="$2"01
	       else
		 echo "$BN: YEAR/MONTH should be specified as YYYY/MM or YYYY/"
		 exit 1
               fi
	   else
	     SINCE="${2/#GSE/}"
           fi
           shift 2
           ;;
      --organism ) ORGANISM="$2"
           shift 2
           ;;
      --test ) TEST="$2"
           shift 2
           ;;
      -k | --keep ) KEEP=1
           shift
           ;;
      -q | --quiet ) QUIET=-q
           shift
           ;;
      --by-array ) SERIESTYPE="Expression profiling by array"
	    shift
	    ;;
      --series-type ) SERIESTYPE="$2"
	    shift 2
	    ;;
      --series-types ) SERIESFILE="$2"
	    check_exists "$SERIESFILE"
	    shift 2
	    ;;
      -nv | --no-verbose ) NV=-nv
           shift
           ;;
      -v | --verbose ) VERBOSE=1
           shift
           ;;
      -* ) echo "$BN: unknown option $1"
           exit 1
           ;;
      *  ) break
           ;;
  esac
done


# Preliminary check of options:
if [ -n "$INCLUDE" -a -n "$EXCLUDE" ] ; then
  echo $BN: only one of --include and --exclude may be specified.
  exit 1
fi

if [ -n "$SERIESTYPE" -a  -n "$SERIESFILE" ] ; then
   echo "$BN: at most one of the following options may be specified: --series-type, --series-types, --by-array"
   exit 1
fi

if [ -n "$INCLUDE" -a -z "$DOWNLOAD" ] ; then
  echo "$BN: --download must be specified since --include has been specified."
  exit 1
fi

if [ "$TEST" = -1 ] ; then
  # DOWNLOAD=~/spell-tools/data/download
  TEST=10000
  VERBOSE=1
  # SINCE=28390
  # EXCLUDE=/Genomics/Users/peak/spell-tools/data/exclude
  TMP=~/spell-tools/data/20110427
  KEEP=1
  verbose DOWNLOAD=$DOWNLOAD
  verbose TEST=$TEST
  verbose SINCE=$SINCE
  verbose TMP=$TMP
  verbose KEEP=$KEEP
fi

function continuep {
   local PROMPT="$1"
   if [ -z "$1" ] ; then
      PROMPT="Continue? [yN]"
   fi
   read -p "$PROMPT " x
   case "$x" in
     y | Y | yes | YES ) return
     ;;
   esac
   exit
}

function verbose {
  if [ "$VERBOSE" ] ; then
    echo "$@"
  fi
}

mkdir -p "$TMP"

OUT=$TMP/GSE_list

# GEO query language:
# operators: AND OR NOT
# Entry Type: gds (dataset) , gse (series), or gpl (platform)
# syntax: term[field] Op term[field] ...
# The default value of retmax is too small to be omitted.
# The max value of retmax is 10000
# Example: 
# TERM=human[organism]+AND+topoisomerase[protein+name]

# TERM="Saccharomyces+cerevisiae[organism]"

# For GDS records:
# TERM="yeast[orgn]+AND+gds[Entry+Type]"

# For GSE records:
# TERM="yeast[orgn]+AND+gse[Entry+Type]"

TERM="$ORGANISM[organism]+AND+gse[Entry+Type]"

# GTYP is a synonym for "DataSet Type"
if [ -n "$SERIESTYPE" ] ; then
  SERIESTYPES="${SERIESTYPE}[GTYP]"
fi

count=0
if [ -n "$SERIESFILE" ] ; then
    # DO NOT PIPE AS THAT CREATES A SUBPROCESS
    while read line ; do
      count=$((count + 1))
      if [ $count -gt 20 ] ; then
	  echo "$BN: no more than 20 types may be specified"
	  exit 2
      fi
      if [ -z "$SERIESTYPES" ] ; then
	  SERIESTYPES="\"${line}\"[GTYP]"
      else
	  SERIESTYPES="$SERIESTYPES+OR+\"${line}\"[GTYP]"
      fi
    done < "$SERIESFILE"
fi

if [ -n "$SERIESTYPES" ] ; then
  TERM="${TERM}+AND+($SERIESTYPES)"
fi

if [ -n "$SINCEDATE" ] ; then
    RANGE=$((1 + $(date "+%Y") ))
    RANGE="${SINCEDATE}:$RANGE/01[PDAT]"
    TERM="${TERM}+AND+$RANGE"
fi

if [ -n "$MINIMUM" ] ; then
    # NSAM = Number of Samples
    TERM="${TERM}+AND+${MINIMUM}:100000[NSAM]"
fi

verbose TERM="$TERM"

function UIDS {
  # GEO Datasets return the "GDS ID"
  wget $NV $QUIET -O $OUT \
    "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=gds&term=$TERM&retmax=10000"

  fgrep "<Id>" $OUT | fgrep "</Id>" | sed -e 's/[	 ]*<Id>\([0-9]*\).*/\1/' | sort -n > $OUT.sorted
}

# A filter to exclude items in $1
# Neither stdin nor $1 need be sorted.
# Example: cat - | exclude FILE
# Global: TMP
function exclude {
  sort | comm -23 - <(sort "$1")
}


function initialize {
  for f 
  do
    if [ -r "$f" ] ; then /bin/rm "$f" ; fi
    touch "$f"
  done
}


# Global: everything except count ID ACCESSION
function map {
  local count ID ACCESSION
  count=0
  initialize "$OUT.map" "$OUT.accession"
  
  cat $OUT.sorted | while read -r ID etc ; do

    if [[ -n "$TEST" && "$count" -ge "$TEST" ]] ; then break ; fi

    # ID=200027539
    # The entire page:
    # wget -O GDS http://www.ncbi.nlm.nih.gov/gds/?term=200027539
    # then grep for /geo/query/acc.cgi?acc=GSE27539 or some such

    # -nv is good too
    wget -q -O $TMP/out "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=gds&id=$ID&report=docsum&retmode=text"
    # grep for: 1: GSE27539
    ACCESSION=$(grep GSE $TMP/out | grep record | sed 's/.*\(GSE[0-9]*\) .*/\1/')
    verbose $ID $ACCESSION

    if [[ -z "$SINCE" || "${ACCESSION/#GSE/}" -gt "$SINCE" ]] ; then
       count=$((count + 1))
       echo "$ID $ACCESSION" >> "$OUT.map"
       echo "$ACCESSION" >> "$OUT.accession"
    else
       verbose Skipping $ACCESSION
    fi
  done

  if [ -n "$EXCLUDE" ] ; then
    /bin/mv $OUT.accession  $OUT.accession.bak
    cat $OUT.accession.bak | exclude "$EXCLUDE" > $OUT.accession
  fi
}


# Download the soft files specified by stdin
# ASSUMES: $DOWNLOAD has been specified
function download {
  local rc accession
  mkdir -p "$DOWNLOAD"
  if [ $? != 0 ] ; then
    rc=$?
    echo "$BN: unable to mkdir $DOWNLOAD"
    exit $rc
  fi
  while read -r accession ; do
    if [ -z "$accession" -o "${accession:0:1}" = "#" ] ; then continue ; fi
    # -A SPEC == --acclist SPEC
    wget $NV $QUIET -N -P "$DOWNLOAD" -A.soft.gz "ftp://ftp.ncbi.nih.gov/pub/geo/DATA/SOFT/by_series/$accession/${accession}_family.soft.gz"
  done
}

# If $INCLUDE has been specified then use that:
if [ -z "$INCLUDE" ] ; then
  UIDS
  map
  if [ -n "$DOWNLOAD" ] ; then
    if [ -z "$TEST" ] ; then
       cat $OUT.accession | download
    else
       head -n "$TEST" $OUT.accession | download
    fi
  fi

else
    if [ -n "$DOWNLOAD" ] ; then
      cat "$INCLUDE" | download
    fi
fi

if [ -r "$OUT.accession" ] ; then
  if [ -n "$OUTFILE" ] ; then
     /bin/mv "$OUT.accession" "$OUTFILE"
  else
     cat "$OUT.accession"
  fi
fi

# Cleanup:
if [ -z "$KEEP" ] ; then
  if [ -d "$TMP" ] ; then
    /bin/rm -r "$TMP"
  fi
else
  verbose "$BN: temporary files are in $TMP"
fi
