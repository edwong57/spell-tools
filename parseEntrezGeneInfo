#!/bin/bash
# Copyright (C) 2011 peak@princeton.edu
# License: Creative Commons Attribution-NonCommerical-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)
# See http://creativecommons.org/licenses/by-nc/3.0/
# Attribution shall include the copyright notice above.

# peak@princeton.edu 2011
# For help: $0 --help

# Requires: python and $DN/parseEntrezGeneInfo.py

VERSION=0.1

BN=`basename "$0"`
DN=$(cd $(dirname "$0"); pwd)

# Defaults:
DOWNLOAD=../data/download
DATA=../data

# ORGANISM is only needed for the help text.
ORGANISM="Saccharomyces cerevisiae"

# KEGG_ID is passed to the Python script
KEGG_ID=sce

# THIS IS CRITICALLY IMPORTANT:
TAX_ID=559292

function help {
cat <<EOF
Syntax: $BN [OPTIONS]

This script can be used to download or refresh the NCBI gene_info file and then invoke parseEntrezGeneInfo.py.

Options:
   -v | --verbose :: verbose
  --refresh       :: ensure that the gene_info.gz file from NCBI is uptodate
  --keep          :: keep the {KEGG_ID}_gene_info file that is normally created
                     by this script
  --data DIR      :: directory for data files generated by the Python
                     script (defaults to $DATA)
  --download DIR  :: directory of (or for) downloaded files (defaults
                     to $DOWNLOAD)
  --kegg_id KEGG_ID :: KEGG ID for the python script (defaults to
                     $KEGG_ID, the appropriate value for $ORGANISM)
  --tax_id TAX_ID :: NCBI taxonomy ID (defaults to $TAX_ID, the
                     appropriate value for $ORGANISM)

Example: $BN --keep

Notes:
  * The Python script produces files with filenames prefixed by {KEGG_ID}_
  * If the --refresh option is specified, then this script will ensure
    that {DOWNLOAD}/gene_info.gz is uptodate, and then generate
    {DOWNLOAD}/{KEGG_ID}_gene_info; otherwise, if the latter file
    exists, this script will reuse it unless DOWNLOAD/gene_info.gz
    file exists and is newer.
  * This script will ignore {DOWNLOAD}/gene_info even if it exists.
  * KEGG organism identifiers are available at
    http://www.genome.jp/kegg/catalog/org_list.html
  * tax_id is available from
    http://www.ncbi.nlm.nih.gov/projects/Gene/gentrez_stats.cgi

Organism                  KEGG_ID tax_id
--------                  ------- ------
Saccharomyces cerevisiae  sce     559292 * 

* The tax_id for sce is for Strain S288c.

Version: $BN $VERSION

See source for copyright and licensing details.
EOF
}

while [ "$1" ]
do case "$1" in
      -h | --help ) help
           exit
           ;;
      -v | --verbose ) VERBOSE=1
           shift
           ;;
      --download ) DOWNLOAD="$2"
	    shift 2
	    ;;
      --data ) DATA="$2"
	    shift 2
	    ;;
      --keep ) KEEP=1
	    shift
	    ;;
      --refresh ) REFRESH=1
	    shift
	    ;;
      --kegg-id | --kegg_id | --keggid | --kegg )
	    KEGG_ID="$2"
	    shift 2
	    ;;
      --tax-id  | --tax_id  | --taxid )
	    TAX_ID="$2"
	    shift 2
	    ;;
      -* ) echo "$BN: unknown option $1"
           exit 1
           ;;
      *  ) break
           ;;
  esac
done

function die {
    echo "$BN: $@" >&2
    exit 1
}

function checkdir {
    if [ ! -d "$1" ] ; then mkdir -p "$1" || die "Unable to mkdir $1" ; fi
}

function continuep {
   local PROMPT="$1"
   if [ -z "$1" ] ; then
      PROMPT="Continue? [yN]"
   fi
   read -p "$PROMPT " x
   case "$x" in
     y | Y | yes | YES ) return
     ;;
   esac
   exit
}

function verbose {
  if [ "$VERBOSE" ] ; then
    echo "$@"
  fi
}

# Syntax: safecd DIR [MESSAGE]
function safecd {
  local rc message
  cd "$1"
  if [ $? = 0 ] ; then return ; fi
  rc=$?
  if [ -n "$2" ] ; then
    message="unable to cd $1; exiting ..."
  else
    message="$2"
  fi
  echo "$BN: $message"
  exit $rc
}

function value {
  value="$1"
  case "$value" in space ) value=" " ;; tab ) value="$TAB" ;; esac
}

# Usage: ask PROMPT
# Example: if ask "Are you well?" ; then ....
# Global: INTERACT
# If INTERACT, then ask the user and if the user says yes, then run true; otherwise run false
function ask {
  local x
  if [ -n "$INTERACT" ] ; then 
      read -p "$1 " x
      case "$x" in
	  y | yes | Y | YES ) true
	      return
	      ;;
      esac
  fi
  false
}

####################
checkdir "$DATA"
checkdir "$DOWNLOAD"

ECHO=

GIZ="$DOWNLOAD/gene_info.gz"
GENE_INFO="$DOWNLOAD/${KEGG_ID}_gene_info"

if [ -n "$VERBOSE" ] ; then cat <<EOF
DATA=$DATA
DOWNLOAD=$DOWNLOAD
GENE_INFO=$GENE_INFO
TAX_ID=$TAX_ID
EOF
fi

# Maybe wget gene_info.gz; if gene_info.gz is new or updated, then NEWER=1
# Global: everything
function maybe_wget {
  if [ -r "$GIZ" ] ; then touch -r "$GIZ" "$GIZ.timestamp" ; fi
  if [ -n "$REFRESH" -o ! -r "$GIZ" ] ; then
    $ECHO wget -N -P "$DOWNLOAD" ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene_info.gz
    if [ $? = 0 ] ; then
      if [ ! -r "$GIZ.timestamp" -o "$GIZ" -nt "$GIZ.timestamp" ] ; then
	  NEWER=1
      fi
    fi
  fi
}

# If GENE_INFO already exists then skip wget, unless REFRESH:
if [ -z "$REFRESH" -a -r "$GENE_INFO" ] ; then
  if [ -r "$GIZ" -a "$GIZ" -nt "$GENE_INFO" ] ; then
    NEWER=1
  else
    verbose $GENE_INFO already exists
  fi
else
  maybe_wget
fi

if [ ! -r "$GENE_INFO" -o -n "$REFRESH" -o -n "$NEWER" ] ; then
   verbose zgrep $TAX_ID ...
   $ECHO zgrep "^${TAX_ID}" "$DOWNLOAD/gene_info.gz" > "$GENE_INFO"
   touch -r "$DOWNLOAD/gene_info.gz" "$GENE_INFO"
fi

$ECHO python "$DN/parseEntrezGeneInfo.py" -i "$GENE_INFO" -o "$DATA" -k "$KEGG_ID"

if [ -z "$KEEP" ] ; then
    /bin/rm "$GENE_INFO"
fi

# It seems we want $DATA/$KEGG_ID.map
